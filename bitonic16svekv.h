
#undef  compare_and_swap16
#define compare_and_swap16(au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1){	    svbool_t masklhi =  svcmpgt(ptrue, au,bu);	    svbool_t maskeqhi =  svcmpeq(ptrue, au,bu);	    svbool_t maskllo =  svcmpgt(ptrue, al, bl);	    svbool_t maskeqlo =  svcmpeq(ptrue, al, bl);	    svbool_t masklindex =  svcmpgt(ptrue, ai, bi);	    svbool_t maskl = svorr_z(ptrue,masklhi,				   svorr_z(ptrue,					 svand_z(ptrue,maskeqhi, maskllo),					 svand_z(ptrue,maskeqhi,					       svand_z(ptrue, maskeqlo,						     masklindex))));   au1= svsel(maskl,bu,au);   al1= svsel(maskl,bl,al);   ai1= svsel(maskl,bi,ai);   bu1= svsel(maskl,au,bu);   bl1= svsel(maskl,al,bl);   bi1= svsel(maskl,ai,bi);}

 

#undef  initial_copy16
#define  initial_copy16(datau, datal, datai,  au, al, ai, bu, bl, bi, n){   uint64_t uintmax = UINT64_MAX;   svuint64_t svuintmax= svdup_u64(uintmax);   svbool_t maska= svwhilelt_b64(0,n);   svbool_t maskb= svwhilelt_b64(8,n);   au= svsel(maska,svld1(ptrue, datau),svuintmax);   bu= svsel(maskb,svld1(ptrue, datau+8),svuintmax);   al= svsel(maska,svld1(ptrue, datal),svuintmax);   bl= svsel(maskb,svld1(ptrue, datal+8),svuintmax);   ai= svsel(maska,svld1(ptrue, datai),svuintmax);   bi= svsel(maskb,svld1(ptrue, datai+8),svuintmax);}

void bitonic16(uint64_t *datau, uint64_t *datal, uint64_t *datai, int n)
{
    int m = 8;
    svuint64_t svzero= svdup_u64(0);
    svbool_t sel;
    svbool_t ptrue =svptrue_b64();
    svuint64_t au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1;
    initial_copy16(datau, datal, datai, au, al, ai, bu, bl, bi, n);
//    dumpavx512(au, bu, "u after initial copy");
//    dumpavx512(al, bl, "l after initial copy");
//    dumpavx512(ai, bi, "i after initial copy");
    compare_and_swap16(au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1);
//    dumpavx512(a1, b1, "after 1st compare");
    static uint64_t __attribute__ ((aligned(64)))  index0[8]={0,1,2,3,4,5,6,7};
    static uint64_t __attribute__ ((aligned(64)))  index1[8]={1,0,3,2,5,4,7,6};
    static uint64_t __attribute__ ((aligned(64)))  index2[8]={1,0,1,0,1,0,1,0};
    static uint64_t __attribute__ ((aligned(64)))  index3[8]={0,1,2,3,4,5,6,7};
    au=au1;
    bu=svtbl(bu1, svld1_u64(ptrue,index1));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index2));
    au1=svsel(sel, au,bu);
    bu1=svsel(sel, bu,au);
    bu=svtbl(bu1, svld1_u64(ptrue,index3));
    au=au1;
    al=al1;
    bl=svtbl(bl1, svld1_u64(ptrue,index1));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index2));
    al1=svsel(sel, al,bl);
    bl1=svsel(sel, bl,al);
    bl=svtbl(bl1, svld1_u64(ptrue,index3));
    al=al1;
    ai=ai1;
    bi=svtbl(bi1, svld1_u64(ptrue,index1));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index2));
    ai1=svsel(sel, ai,bi);
    bi1=svsel(sel, bi,ai);
    bi=svtbl(bi1, svld1_u64(ptrue,index3));
    ai=ai1;
    compare_and_swap16(au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1);
    static uint64_t __attribute__ ((aligned(64)))  index6[8]={0,1,2,3,4,5,6,7};
    static uint64_t __attribute__ ((aligned(64)))  index7[8]={0,1,2,3,4,5,6,7};
    static uint64_t __attribute__ ((aligned(64)))  index8[8]={1,0,1,0,1,0,1,0};
    static uint64_t __attribute__ ((aligned(64)))  index9[8]={1,0,3,2,5,4,7,6};
    au=au1;
    bu=bu1;
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index8));
    au1=svsel(sel, au,bu);
    bu1=svsel(sel, bu,au);
    bu=svtbl(bu1, svld1_u64(ptrue,index9));
    au=au1;
    al=al1;
    bl=bl1;
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index8));
    al1=svsel(sel, al,bl);
    bl1=svsel(sel, bl,al);
    bl=svtbl(bl1, svld1_u64(ptrue,index9));
    al=al1;
    ai=ai1;
    bi=bi1;
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index8));
    ai1=svsel(sel, ai,bi);
    bi1=svsel(sel, bi,ai);
    bi=svtbl(bi1, svld1_u64(ptrue,index9));
    ai=ai1;
    compare_and_swap16(au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1);
    static uint64_t __attribute__ ((aligned(64)))  index12[8]={0,3,1,2,4,7,5,6};
    static uint64_t __attribute__ ((aligned(64)))  index13[8]={3,0,2,1,7,4,6,5};
    static uint64_t __attribute__ ((aligned(64)))  index14[8]={1,0,1,0,1,0,1,0};
    static uint64_t __attribute__ ((aligned(64)))  index15[8]={0,1,2,3,4,5,6,7};
    au=svtbl(au1, svld1_u64(ptrue,index12));
    bu=svtbl(bu1, svld1_u64(ptrue,index13));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index14));
    au1=svsel(sel, au,bu);
    bu1=svsel(sel, bu,au);
    bu=svtbl(bu1, svld1_u64(ptrue,index15));
    au=au1;
    al=svtbl(al1, svld1_u64(ptrue,index12));
    bl=svtbl(bl1, svld1_u64(ptrue,index13));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index14));
    al1=svsel(sel, al,bl);
    bl1=svsel(sel, bl,al);
    bl=svtbl(bl1, svld1_u64(ptrue,index15));
    al=al1;
    ai=svtbl(ai1, svld1_u64(ptrue,index12));
    bi=svtbl(bi1, svld1_u64(ptrue,index13));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index14));
    ai1=svsel(sel, ai,bi);
    bi1=svsel(sel, bi,ai);
    bi=svtbl(bi1, svld1_u64(ptrue,index15));
    ai=ai1;
    compare_and_swap16(au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1);
    static uint64_t __attribute__ ((aligned(64)))  index18[8]={0,1,2,3,4,5,6,7};
    static uint64_t __attribute__ ((aligned(64)))  index19[8]={1,0,3,2,5,4,7,6};
    static uint64_t __attribute__ ((aligned(64)))  index20[8]={1,1,0,0,1,1,0,0};
    static uint64_t __attribute__ ((aligned(64)))  index21[8]={2,3,0,1,6,7,4,5};
    au=au1;
    bu=svtbl(bu1, svld1_u64(ptrue,index19));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index20));
    au1=svsel(sel, au,bu);
    bu1=svsel(sel, bu,au);
    bu=svtbl(bu1, svld1_u64(ptrue,index21));
    au=au1;
    al=al1;
    bl=svtbl(bl1, svld1_u64(ptrue,index19));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index20));
    al1=svsel(sel, al,bl);
    bl1=svsel(sel, bl,al);
    bl=svtbl(bl1, svld1_u64(ptrue,index21));
    al=al1;
    ai=ai1;
    bi=svtbl(bi1, svld1_u64(ptrue,index19));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index20));
    ai1=svsel(sel, ai,bi);
    bi1=svsel(sel, bi,ai);
    bi=svtbl(bi1, svld1_u64(ptrue,index21));
    ai=ai1;
    compare_and_swap16(au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1);
    static uint64_t __attribute__ ((aligned(64)))  index24[8]={0,1,2,3,4,5,6,7};
    static uint64_t __attribute__ ((aligned(64)))  index25[8]={1,0,3,2,5,4,7,6};
    static uint64_t __attribute__ ((aligned(64)))  index26[8]={1,0,1,0,1,0,1,0};
    static uint64_t __attribute__ ((aligned(64)))  index27[8]={1,0,3,2,5,4,7,6};
    au=au1;
    bu=svtbl(bu1, svld1_u64(ptrue,index25));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index26));
    au1=svsel(sel, au,bu);
    bu1=svsel(sel, bu,au);
    bu=svtbl(bu1, svld1_u64(ptrue,index27));
    au=au1;
    al=al1;
    bl=svtbl(bl1, svld1_u64(ptrue,index25));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index26));
    al1=svsel(sel, al,bl);
    bl1=svsel(sel, bl,al);
    bl=svtbl(bl1, svld1_u64(ptrue,index27));
    al=al1;
    ai=ai1;
    bi=svtbl(bi1, svld1_u64(ptrue,index25));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index26));
    ai1=svsel(sel, ai,bi);
    bi1=svsel(sel, bi,ai);
    bi=svtbl(bi1, svld1_u64(ptrue,index27));
    ai=ai1;
    compare_and_swap16(au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1);
    static uint64_t __attribute__ ((aligned(64)))  index30[8]={0,7,1,6,2,5,3,4};
    static uint64_t __attribute__ ((aligned(64)))  index31[8]={7,0,6,1,5,2,4,3};
    static uint64_t __attribute__ ((aligned(64)))  index32[8]={1,0,1,0,1,0,1,0};
    static uint64_t __attribute__ ((aligned(64)))  index33[8]={0,1,2,3,4,5,6,7};
    au=svtbl(au1, svld1_u64(ptrue,index30));
    bu=svtbl(bu1, svld1_u64(ptrue,index31));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index32));
    au1=svsel(sel, au,bu);
    bu1=svsel(sel, bu,au);
    bu=svtbl(bu1, svld1_u64(ptrue,index33));
    au=au1;
    al=svtbl(al1, svld1_u64(ptrue,index30));
    bl=svtbl(bl1, svld1_u64(ptrue,index31));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index32));
    al1=svsel(sel, al,bl);
    bl1=svsel(sel, bl,al);
    bl=svtbl(bl1, svld1_u64(ptrue,index33));
    al=al1;
    ai=svtbl(ai1, svld1_u64(ptrue,index30));
    bi=svtbl(bi1, svld1_u64(ptrue,index31));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index32));
    ai1=svsel(sel, ai,bi);
    bi1=svsel(sel, bi,ai);
    bi=svtbl(bi1, svld1_u64(ptrue,index33));
    ai=ai1;
    compare_and_swap16(au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1);
    static uint64_t __attribute__ ((aligned(64)))  index36[8]={0,1,2,3,4,5,6,7};
    static uint64_t __attribute__ ((aligned(64)))  index37[8]={3,2,1,0,7,6,5,4};
    static uint64_t __attribute__ ((aligned(64)))  index38[8]={1,1,1,1,0,0,0,0};
    static uint64_t __attribute__ ((aligned(64)))  index39[8]={4,5,6,7,0,1,2,3};
    au=au1;
    bu=svtbl(bu1, svld1_u64(ptrue,index37));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index38));
    au1=svsel(sel, au,bu);
    bu1=svsel(sel, bu,au);
    bu=svtbl(bu1, svld1_u64(ptrue,index39));
    au=au1;
    al=al1;
    bl=svtbl(bl1, svld1_u64(ptrue,index37));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index38));
    al1=svsel(sel, al,bl);
    bl1=svsel(sel, bl,al);
    bl=svtbl(bl1, svld1_u64(ptrue,index39));
    al=al1;
    ai=ai1;
    bi=svtbl(bi1, svld1_u64(ptrue,index37));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index38));
    ai1=svsel(sel, ai,bi);
    bi1=svsel(sel, bi,ai);
    bi=svtbl(bi1, svld1_u64(ptrue,index39));
    ai=ai1;
    compare_and_swap16(au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1);
    static uint64_t __attribute__ ((aligned(64)))  index42[8]={0,1,2,3,4,5,6,7};
    static uint64_t __attribute__ ((aligned(64)))  index43[8]={2,3,0,1,6,7,4,5};
    static uint64_t __attribute__ ((aligned(64)))  index44[8]={1,1,0,0,1,1,0,0};
    static uint64_t __attribute__ ((aligned(64)))  index45[8]={2,3,0,1,6,7,4,5};
    au=au1;
    bu=svtbl(bu1, svld1_u64(ptrue,index43));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index44));
    au1=svsel(sel, au,bu);
    bu1=svsel(sel, bu,au);
    bu=svtbl(bu1, svld1_u64(ptrue,index45));
    au=au1;
    al=al1;
    bl=svtbl(bl1, svld1_u64(ptrue,index43));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index44));
    al1=svsel(sel, al,bl);
    bl1=svsel(sel, bl,al);
    bl=svtbl(bl1, svld1_u64(ptrue,index45));
    al=al1;
    ai=ai1;
    bi=svtbl(bi1, svld1_u64(ptrue,index43));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index44));
    ai1=svsel(sel, ai,bi);
    bi1=svsel(sel, bi,ai);
    bi=svtbl(bi1, svld1_u64(ptrue,index45));
    ai=ai1;
    compare_and_swap16(au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1);
    static uint64_t __attribute__ ((aligned(64)))  index48[8]={0,1,2,3,4,5,6,7};
    static uint64_t __attribute__ ((aligned(64)))  index49[8]={1,0,3,2,5,4,7,6};
    static uint64_t __attribute__ ((aligned(64)))  index50[8]={1,0,1,0,1,0,1,0};
    static uint64_t __attribute__ ((aligned(64)))  index51[8]={1,0,3,2,5,4,7,6};
    au=au1;
    bu=svtbl(bu1, svld1_u64(ptrue,index49));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index50));
    au1=svsel(sel, au,bu);
    bu1=svsel(sel, bu,au);
    bu=svtbl(bu1, svld1_u64(ptrue,index51));
    au=au1;
    al=al1;
    bl=svtbl(bl1, svld1_u64(ptrue,index49));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index50));
    al1=svsel(sel, al,bl);
    bl1=svsel(sel, bl,al);
    bl=svtbl(bl1, svld1_u64(ptrue,index51));
    al=al1;
    ai=ai1;
    bi=svtbl(bi1, svld1_u64(ptrue,index49));
    sel = svcmpne(ptrue,svzero,svld1_u64(ptrue,index50));
    ai1=svsel(sel, ai,bi);
    bi1=svsel(sel, bi,ai);
    bi=svtbl(bi1, svld1_u64(ptrue,index51));
    ai=ai1;
    compare_and_swap16(au, al, ai, bu, bl, bi, au1, al1, ai1,  bu1, bl1, bi1);

   svuint64_t c;
   svuint64_t d;
   svbool_t maska= svwhilelt_b64(0,n);
   svbool_t maskb= svwhilelt_b64(8,n);
   c=  svzip1(au1, bu1);
   d=  svzip2(au1, bu1);
//   dumpsve2(c,d,"after sort and interleave");
   svst1(maska, datau, c);
   svst1(maskb, datau+m, d);
   c=  svzip1(al1, bl1);
   d=  svzip2(al1, bl1);
//   dumpsve2(c,d,"after sort and interleave");
   svst1(maska, datal, c);
   svst1(maskb, datal+m, d);
   c=  svzip1(ai1, bi1);
   d=  svzip2(ai1, bi1);
//   dumpsve2(c,d,"after sort and interleave");
   svst1(maska, datai, c);
   svst1(maskb, datai+m, d);
}
